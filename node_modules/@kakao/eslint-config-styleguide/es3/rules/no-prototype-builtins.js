const {LINT_CATEGORY, AIRBNB_CATEGORY} = require('../../lib/generator/constants');

const title = 'Object 의 빌트인 함수는 Object.prototype 을 통해서만 사용한다.';

const rule = 'no-prototype-builtins';

const desc = null;

const options = 'error';

const cause = null;

const lintCategory = LINT_CATEGORY.POSSIBLE_ERRORS;

const airbnbCategory = AIRBNB_CATEGORY.OBJECTS;

/* eslint-disable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */
/* eslint-disable no-prototype-builtins */
const bad = () => {
  var hasBarProperty = foo.hasOwnProperty('bar');

  var isPrototypeOfBar = foo.isPrototypeOf(bar);

  var barIsEnumerable = foo.propertyIsEnumerable('bar');
};
/* eslint-enable no-prototype-builtins */

const good = () => {
  var hasBarProperty = Object.prototype.hasOwnProperty.call(foo, 'bar');

  var isPrototypeOfBar = Object.prototype.isPrototypeOf.call(foo, bar);

  var barIsEnumerable = Object.prototype.propertyIsEnumerable.call(foo, 'bar');
};

const best = null;
/* eslint-enable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */

module.exports = {
  title,
  rule,
  options,
  desc,
  cause,
  lintCategory,
  airbnbCategory,
  bad,
  good,
  best
};
