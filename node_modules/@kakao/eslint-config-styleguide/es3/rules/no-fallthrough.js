const {LINT_CATEGORY, AIRBNB_CATEGORY} = require('../../lib/generator/constants');

const title = 'case 문이 비어있지 않으면 암묵적으로 종료문을 생략하지 않는다.';

const rule = 'no-fallthrough';

const desc = 'break, return, throw 가 종료문에 해당하며, 의도적으로 종료하지 않는 경우 주석으로 fall through 를 명시한다.';

const options = 'error';

const cause = null;

const lintCategory = LINT_CATEGORY.BEST_PRACTICES;

const airbnbCategory = AIRBNB_CATEGORY.CONTROL_STATEMENTS;

/* eslint-disable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */
/* eslint-disable no-fallthrough */
const bad = () => {
  switch (foo) {
    case 1:
      doSomething();

    case 2:
      doSomething();
  }
};
/* eslint-enable no-fallthrough */

const good = () => {
  switch (foo) {
    case 1:
      doSomething();
      break;

    case 2:
      doSomething();
  }

  function bar (foo) {
    switch (foo) {
      case 1:
        doSomething();
        return;

      case 2:
        doSomething();
    }
  }

  switch (foo) {
    case 1:
      doSomething();
      throw new Error('Boo!');

    case 2:
      doSomething();
  }

  switch (foo) {
    case 1:
    case 2:
      doSomething();
  }

  switch (foo) {
    case 1:
      doSomething();
      // falls through

    case 2:
      doSomething();
  }
};

const best = null;
/* eslint-enable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */

module.exports = {
  title,
  rule,
  options,
  desc,
  cause,
  lintCategory,
  airbnbCategory,
  bad,
  good,
  best
};
