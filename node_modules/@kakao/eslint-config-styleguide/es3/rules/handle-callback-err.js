const {LINT_CATEGORY, AIRBNB_CATEGORY} = require('../../lib/generator/constants');

const title = '에러 객체는 항상 처리한다.';

const rule = 'handle-callback-err';

const desc = `파라미터 이름이 err, error 처럼 에러로 추정되는 경우, 반드시 해당 에러를 처리해야 한다.  
에러로 추정하는 패턴은 ^[\\S]*(e|E)rr(or)?$ 이다.`;

const options = [
  'error',
  '^[\\S]*(e|E)rr(or)?$'
];

const cause = null;

const lintCategory = LINT_CATEGORY.BEST_PRACTICES;

const airbnbCategory = AIRBNB_CATEGORY.ERRORS;

/* eslint-disable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */
/* eslint-disable handle-callback-err */
const bad = () => {
  function loadData (err, data) {
    doSomething();
  }

  function loadData (error, data) {
    doSomething();
  }

  function loadData (parseErr, data) {
    doSomething();
  }

  function loadData (parseError, data) {
    doSomething();
  }
};
/* eslint-enable handle-callback-err */

const good = () => {
  function loadData (err, data) {
    if (err) {
      console.log(err.stack);
    }
    doSomething();
  }

  function loadData (error, data) {
    if (error) {
      console.log(error.stack);
    }
    doSomething();
  }

  function loadData (parseErr, data) {
    if (parseErr) {
      console.log(parseErr.stack);
    }
    doSomething();
  }

  function loadData (parseError, data) {
    if (parseError) {
      console.log(parseError.stack);
    }
    doSomething();
  }
};

const best = null;
/* eslint-enable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */

module.exports = {
  title,
  rule,
  options,
  desc,
  cause,
  lintCategory,
  airbnbCategory,
  bad,
  good,
  best
};
