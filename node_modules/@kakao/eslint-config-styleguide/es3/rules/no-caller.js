const {LINT_CATEGORY, AIRBNB_CATEGORY} = require('../../lib/generator/constants');

const title = 'arguments.callee와 arguments.caller를 사용하지 않는다.';

const rule = 'no-caller';

const desc = null;

const options = 'error';

const cause = null;

const lintCategory = LINT_CATEGORY.BEST_PRACTICES;

const airbnbCategory = AIRBNB_CATEGORY.FUNCTIONS;

/* eslint-disable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */
/* eslint-disable no-caller */
const bad = () => {
  function foo (n) {
    if (n <= 0) {
      return;
    }

    arguments.callee(n - 1);
  }

  [1, 2, 3, 4, 5].map(function (n) {
    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;
  });

  function bar () {
    console.log(arguments.caller);
  }
};
/* eslint-enable no-caller */

const good = () => {
  function foo (n) {
    if (n <= 0) {
      return;
    }

    foo(n - 1);
  }

  [1, 2, 3, 4, 5].map(function factorial (n) {
    return !(n > 1) ? 1 : factorial(n - 1) * n;
  });
};

const best = null;
/* eslint-enable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */

module.exports = {
  title,
  rule,
  options,
  desc,
  cause,
  lintCategory,
  airbnbCategory,
  bad,
  good,
  best
};
