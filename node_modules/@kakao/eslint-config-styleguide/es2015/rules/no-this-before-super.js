const {LINT_CATEGORY, AIRBNB_CATEGORY} = require('../../lib/generator/constants');

const title = 'this/super 사용 전에 생성자에서 super() 메소드를 호출한다.';

const rule = 'no-this-before-super';

const desc = null;

const options = 'error';

const cause = null;

const lintCategory = LINT_CATEGORY.POSSIBLE_ERRORS;

const airbnbCategory = AIRBNB_CATEGORY.CLASSES_N_CONSTRUCTORS;

/* eslint-disable no-unused-vars, no-undef, no-unused-expressions, no-redeclare */
class Parent {}

const bad = () => {
  class Bad extends Parent {
    constructor() {
      this.a = 0;
      super();
    }
  }

  class Bad2 extends Parent {
    constructor() {
      this.foo();
      super();
    }
  }

  class Bad3 extends Parent {
    constructor() {
      super.foo();
      super();
    }
  }

  class Bad4 extends Parent {
    constructor() {
      super(this.foo());
    }
  }
};

const good = () => {
  class Good {
    constructor () {
      this.a = 0; // extends 하지 않은 클래스의 this 사용
    }
  }

  class Good2 extends Parent {
    constructor () {
      super();
      this.a = 0; // super() 호출 뒤에 this 사용
    }
  }

  class Good3 extends Parent {
    foo () {
      this.a = 0; // 생성자가 아닌 함수에서 this 사용
    }
  }
};

const best = null;
/* eslint-enable no-unused-vars, no-undef, no-unused-expressions, no-redeclare */

module.exports = {
  title,
  rule,
  options,
  desc,
  cause,
  lintCategory,
  airbnbCategory,
  bad,
  good,
  best,
};
