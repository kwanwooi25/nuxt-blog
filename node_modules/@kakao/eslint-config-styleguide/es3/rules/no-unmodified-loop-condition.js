const {LINT_CATEGORY, AIRBNB_CATEGORY} = require('../../lib/generator/constants');

const title = '무한 반복되는 반복문을 사용하지 않는다.';

const rule = 'no-unmodified-loop-condition';

const desc = null;

const options = 'error';

const cause = null;

const lintCategory = LINT_CATEGORY.BEST_PRACTICES;

const airbnbCategory = AIRBNB_CATEGORY.CONTROL_STATEMENTS;

/* eslint-disable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */
/* eslint-disable no-unmodified-loop-condition */
const bad = () => {
  while (node) {
    doSomething(node);
  }
  node = other;

  for (var j = 0; j < items.length; ++i) {
    doSomething(items[j]);
  }

  while (node !== root) {
    doSomething(node);
  }
};
/* eslint-enable no-unmodified-loop-condition */

const good = () => {
  while (node) {
    doSomething(node);
    node = node.parent;
  }

  for (var j = 0; j < items.length; ++j) {
    doSomething(items[j]);
  }

  // OK, node 값이 변경됨
  while (node !== root) {
    doSomething(node);
    node = node.parent;
  }

  // doSomething() 안에서 obj.foo 변경 가능
  while (obj.foo) {
    doSomething(obj);
  }

  // check() 함수값이 달라질 수 있음
  while (check(obj)) {
    doSomething(obj);
  }
};

const best = null;
/* eslint-enable no-undef, no-unused-vars, no-redeclare, no-magic-numbers, no-unused-expressions, no-self-compare, no-cond-assign, default-case, no-unreachable */

module.exports = {
  title,
  rule,
  options,
  desc,
  cause,
  lintCategory,
  airbnbCategory,
  bad,
  good,
  best
};
